
SETTING UP THE SERVER
-------------------------------------------------------
-> npm init -y

-> v package.json pridam: 
     	"scripts": {
   	 "start": "nodemon index.js"
 	 },
-> npm install nodemon -g

-> run server ->>>>>>>>>> nodemon index (nebo  -> npm run start) 

APOLO SERVER DEPENDENCIES
------------------------------------------------------------
->  npm install apollo-server graphql

BOILER PLATE
----------------------------------------------------------
(index.js)

	const { ApolloServer, gql } = require('apollo-server');

	const typeDefs = gql`

  	type Book {
   	 title: String
    	author: String
  	}

  	type Query {
    	books: [Book]
  	}
	`;


	const books = [
 	 {
   	 title: 'The Awakening',
    	author: 'Kate Chopin',
 	 },
  	{
    	title: 'City of Glass',
   	 author: 'Paul Auster',
 	 },
	];

	// schema. This resolver retrieves books from the "books" array above.
	const resolvers = {
  	Query: {
   	 books: () => books,
  	},
	};



	const server = new ApolloServer({ typeDefs, resolvers });

	// The `listen` method launches a web server.
	server.listen().then(({ url }) => {
  	console.log(`ğŸš€  Server ready at ${url}`);
	});


QUERIES
------------------------------------------------
GET -->

query{
   books{
       title
       author
   }
}

POST -->
mutation{
  addDomain(name: "dadadaed.com"){
    name                                                               <-- must specify what to get back
  }
}






EXAMPLE MINIMAL API
------------------------------------------------------



	const { ApolloServer, gql } = require('apollo-server');
    const {domains} = require('./db')

	const typeDefs = gql`

  	type Domain {
   	 name: String
  	}

  	type Query {
    	domains: [Domain]
  	}
    
    type Mutation {
        addDomain(name:String): Domain
    }

`;




	// schema. This resolver retrieves books from the "books" array above.
	const resolvers = {
  	Query: {
   	    domains: () => domains,
  	    },
    Mutation: {
        addDomain: (parent, {name}, ctx) =>{
            let newDomain = {name}

           domains.push(newDomain)
           return newDomain
        }
    }


	};


    const server = new ApolloServer({ typeDefs, resolvers });

    // The `listen` method launches a web server.
    server.listen().then(({ url }) => {
    console.log(`ğŸš€  Server ready at ${url}`);
    });